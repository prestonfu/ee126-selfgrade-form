{"version":3,"file":"component---src-components-self-grade-form-tsx-45c60e7615dd9178170e.js","mappings":"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","sources":["webpack://ee120-self-grade-form/./src/styles/SelfGradeForm.module.css","webpack://ee120-self-grade-form/./src/components/SelfGradeForm.tsx","webpack://ee120-self-grade-form/./src/components/externalLink.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport var comment = \"SelfGradeForm-module--comment--ae06d\";\nexport var commentField = \"SelfGradeForm-module--commentField--d7fb4\";\nexport var description = \"SelfGradeForm-module--description--be6fb\";\nexport var guideTable = \"SelfGradeForm-module--guideTable--29795\";\nexport var homeworkFormWrapper = \"SelfGradeForm-module--homeworkFormWrapper--e3d0f\";\nexport var inputField = \"SelfGradeForm-module--inputField--b0ccf\";\nexport var jsonOutput = \"SelfGradeForm-module--jsonOutput--d2ccc\";\nexport var note = \"SelfGradeForm-module--note--6261f\";\nexport var optionCol = \"SelfGradeForm-module--optionCol--c2cfa\";\nexport var questionPoints = \"SelfGradeForm-module--questionPoints--12a35\";\nexport var sectionTitle = \"SelfGradeForm-module--sectionTitle--8de4c\";\nexport var submitButton = \"SelfGradeForm-module--submitButton--0ffa7\";\nexport var title = \"SelfGradeForm-module--title--04162\";","import React, { useState } from 'react';\nimport * as homeworkFormStyles from \"../styles/SelfGradeForm.module.css\"\nimport ExternalLink from \"./externalLink\"\nimport { AssignmentType, QuestionType } from '../types';\n\ninterface PageContextType {\n  assignment: AssignmentType\n}\n\nconst selfGradeOptions = [0, 2, 5, 8, 10];\n  const difficultyOptions = [\"1 (least difficult)\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10 (most difficult)\"];\n\nexport default function SelfGradeForm({ pageContext }: { pageContext: PageContextType }) {\n  const assignment = pageContext.assignment\n  console.log(assignment.questions)\n\n  const [personalInfo, setPersonalInfo] = useState({\n    \"name\": null,\n    \"email\": null,\n    \"studentID\": null,\n  });\n  const [questions, setQuestions] = useState(assignment.questions.reduce((questionsObj, question) => ({\n      ...questionsObj,\n      [question.name]: {\n        \"grade\": null,\n        \"comments\": \"\",\n        \"points\": question.points\n      }\n    }), {}));\n  const [feedback, setFeedback] = useState({\n    \"difficulty\": null,\n    \"hours\": null,\n    \"feedback\": null,\n  });\n  console.log(feedback)\n\n  const [formObj, setFormObj] = useState({});\n  const [submitted, setSubmitted] = useState(false);\n\n  const updatePersonalInfo = (field: string, value: string) => {\n    setPersonalInfo({...personalInfo, [field]: value});\n  }\n  const updateFeedback = (field: string, value: string) => {\n    setFeedback({...feedback, [field]: value});\n  }\n\n  const updateQuestion = (questionName: string, value: string | number, isScore: boolean) => {\n    const questionsCopy = {...questions};\n    if (isScore) {\n      questionsCopy[questionName].grade = value;\n    } else {\n      questionsCopy[questionName].comments = value;\n    }\n    \n    setQuestions(questionsCopy);\n  }\n\n  const downloadObjectAsJson = (exportObj, exportName) => {\n    var dataStr = \"data:text/json;charset=utf-8,\" + encodeURIComponent(JSON.stringify(exportObj));\n    var downloadAnchorNode = document.createElement('a');\n    downloadAnchorNode.setAttribute(\"href\",     dataStr);\n    downloadAnchorNode.setAttribute(\"download\", exportName + \".json\");\n    document.body.appendChild(downloadAnchorNode); // required for firefox\n    downloadAnchorNode.click();\n    downloadAnchorNode.remove();\n  }\n\n  const submitForm = (e) => {\n    if (e.target.reportValidity()) {\n      const newFormObj = {\"assignment\": assignment.name, ...personalInfo, \"questions\": questions, ...feedback}\n      downloadObjectAsJson(newFormObj, assignment.pageName + \"-selfgrade\")\n      setFormObj(newFormObj);\n      setSubmitted(true);\n    }\n  }\n\n  return (\n      <div className={homeworkFormStyles.homeworkFormWrapper}>\n        <div className={homeworkFormStyles.title}>{assignment.name} Self-Grade</div>\n        <div className={homeworkFormStyles.description}>\n          <div>Here is the gradescope link for this assignment: <ExternalLink href={assignment.gradescopeLink}>Gradescope Link</ExternalLink></div>\n          <div>Here is the link to the solutions for this assignment: <ExternalLink href={assignment.solutionsLink}>Solutions Link</ExternalLink></div>\n          <div>Self-grade your assignment submission by filling out all the fields. To learn more about self-grades, how they factor into your final assignment grade,\n          and how you should go about them, check out <ExternalLink href=\"https://inst.eecs.berkeley.edu/~ee126/fa24/info.html#self-grading-policy\">the course website</ExternalLink>.</div>\n        </div>\n        <div>\n          <div className={homeworkFormStyles.sectionTitle}>Self-grade rubric</div>\n          <table className={`table table-striped table-hover ${homeworkFormStyles.guideTable}`}>\n            <thead className={`thead-dark ${homeworkFormStyles.tableHead}`}>\n              <th>Score</th>\n              <th>Score Description</th>\n            </thead>\n            <tbody>\n              <tr>\n                <td className={homeworkFormStyles.optionCol}>0</td>\n                <td>Didn’t attempt or very wrong.</td>\n              </tr>\n              <tr>\n                <td className={homeworkFormStyles.optionCol}>2</td>\n                <td>Got started and made some progress, but went off in the wrong direction or with no clear direction.</td>\n              </tr>\n              <tr>\n                <td className={homeworkFormStyles.optionCol}>5</td>\n                <td>Right direction and got halfway there.</td>\n              </tr>\n              <tr>\n                <td className={homeworkFormStyles.optionCol}>8</td>\n                <td>Mostly right but a minor thing missing or wrong.</td>\n              </tr>\n              <tr>\n                <td className={homeworkFormStyles.optionCol}>10</td>\n                <td>100% correct, with full effort and work shown. Complete work must be shown for full credit!</td>\n              </tr>\n            </tbody>\n          </table>\n        </div>\n        <div>\n          <form target=\"frame\" id=\"selfGradeForm\" onSubmit={submitForm}>\n            <div className={homeworkFormStyles.sectionTitle}>Personal Info</div>\n            <div className={`form-group ${homeworkFormStyles.inputField}`}>\n              <label htmlFor=\"inputName\">Name</label>\n              <input name=\"inputName\" type=\"text\" className=\"form-control\" id=\"inputName\" placeholder=\"Enter Name\" onChange={(e) => updatePersonalInfo(\"name\", e.target.value)} required />\n            </div>\n            <div className={`form-group ${homeworkFormStyles.inputField}`}>\n              <label htmlFor=\"inputEmail\">Email address</label>\n              <input name=\"inputEmail\" type=\"email\" className=\"form-control\" id=\"inputEmail\" aria-describedby=\"emailHelp\" placeholder=\"Enter Email\" onChange={(e) => updatePersonalInfo(\"email\", e.target.value)} required />\n              <small id=\"emailHelp\" className=\"form-text text-muted\">Your Berkeley Email (ex. oski@berkeley.edu)</small>\n            </div>\n            <div className={`form-group ${homeworkFormStyles.inputField}`}>\n              <label htmlFor=\"inputStudentID\">Student ID</label>\n              <input name=\"inputStudentID\" type=\"text\" className=\"form-control\" id=\"inputStudentID\" placeholder=\"Enter Student ID\" onChange={(e) => updatePersonalInfo(\"studentID\", e.target.value)} required />\n            </div>\n            <div className={homeworkFormStyles.sectionTitle}>Self Grade Questions</div>\n            {assignment.questions.map((question) =>\n                <>\n                  <div className={homeworkFormStyles.inputField}>\n                    <div>Question {question.name} <span className={homeworkFormStyles.questionPoints}>({question.points} points)</span></div>\n                    {selfGradeOptions.map((selfGradeOption) => \n                      <div className={`form-check form-check-inline`}>\n                        <input className=\"form-check-input\" type=\"radio\" name={`${question.name}-inlineRadioOptions`} id={`${question.name}-${selfGradeOption}`} value={selfGradeOption} onChange={e => updateQuestion(question.name, e.target.value, true)} required/>\n                        <label className=\"form-check-label\" htmlFor={`${question.name}-${selfGradeOption}`}>{selfGradeOption}</label>\n                      </div>\n                    )}\n                    <div className={`form-group ${homeworkFormStyles.commentField}`}>\n                      <label className={homeworkFormStyles.comment} htmlFor=\"input\">Comment</label>\n                      <input name=\"inputComment\" type=\"text\" className=\"form-control\" id=\"inputName\" placeholder=\"Enter comment for a 2, 5, or 8 score\" onChange={e => updateQuestion(question.name, e.target.value, false)} required={questions[question.name].grade != 0 && questions[question.name].grade != 10} />\n                    </div>\n                  </div>\n                </>\n              )}\n              <div>\n                <div className={homeworkFormStyles.sectionTitle}>Feedback (Optional)</div>\n                <div className={homeworkFormStyles.inputField}>\n                  <div>Rate the difficulty of this homework</div>\n                  <div>\n                    {difficultyOptions.map((difficultyOption) => \n                      <div className={`form-check form-check-inline`}>\n                        <input className=\"form-check-input\" type=\"radio\" name={`difficulty-inlineRadioOptions`} id={`difficulty-${difficultyOption}`} value={`${difficultyOption}`} onChange={(e) => updateFeedback(\"difficulty\", e.target.value)} />\n                        <label className=\"form-check-label\" htmlFor={`difficulty-${difficultyOption}`}>{difficultyOption}</label>\n                      </div>\n                    )}\n                  </div>\n                </div>\n                <div>\n                  <div className={`form-group ${homeworkFormStyles.inputField}`}>\n                    <label htmlFor=\"inputHours\">How many hours did this homework take you?</label>\n                    <input name=\"inputHours\" type=\"number\" className=\"form-control\" min=\"0\" id=\"inputHours\" placeholder=\"Enter # of Hours\" onChange={(e) => updateFeedback(\"hours\", e.target.value)} />\n                  </div>\n                </div>\n                <div>\n                  \n                </div>\n                <div className={`form-group ${homeworkFormStyles.inputField}`}>\n                  <label htmlFor=\"feedback\">Do you have any other feedback for this homework?</label>\n                  <textarea name=\"feedback\" className=\"form-control\" id=\"feedback\" rows={3} onChange={(e) => updateFeedback(\"feedback\", e.target.value)} ></textarea>\n                </div>\n              </div>\n            <button id=\"submitButton\" className={`btn btn-primary ${homeworkFormStyles.submitButton}`} type=\"submit\">GENERATE SELF-GRADE</button>\n            <label className=\"form-text text-muted\" htmlFor=\"submitButton\">Pressing this button will generate and download the JSON Self-Grade file (which you should then submit to the Gradescope assignment)</label>\n          </form>\n          {submitted ? \n            <div>\n              <hr />\n              <div>\n                If you encounter issues with downloading the file, feel free to copy the below JSON into a JSON file and submit that to the gradescope assignment\n              </div>\n              <pre className={homeworkFormStyles.jsonOutput}>{JSON.stringify(formObj, null, 2)}</pre>\n            </div>: <div/>}\n        </div>\n        <iframe name=\"frame\"></iframe>\n    </div>\n\n  )\n}\n","import React from \"react\"\n\ntype Props = {\n  style?: React.CSSProperties\n  className?: string\n  href: string\n  children: React.ReactNode\n}\n\n/**\n * Serves as an external Link\n */\nfunction ExternalLink(props: Props) {\n  return (\n    <a\n      rel=\"noreferrer noopener\"\n      target=\"__blank\"\n      className={props.className}\n      style={props.style}\n      href={props.href}\n    >\n      {props.children}\n    </a>\n  )\n}\n\nexport default ExternalLink"],"names":["comment","commentField","description","guideTable","homeworkFormWrapper","inputField","jsonOutput","optionCol","questionPoints","sectionTitle","submitButton","title","selfGradeOptions","difficultyOptions","SelfGradeForm","_ref","pageContext","assignment","console","log","questions","personalInfo","setPersonalInfo","useState","setQuestions","reduce","questionsObj","question","name","points","feedback","setFeedback","formObj","setFormObj","submitted","setSubmitted","updatePersonalInfo","field","value","updateFeedback","updateQuestion","questionName","isScore","questionsCopy","grade","comments","React","className","homeworkFormStyles","ExternalLink","href","gradescopeLink","solutionsLink","target","id","onSubmit","e","reportValidity","newFormObj","exportObj","exportName","pageName","dataStr","encodeURIComponent","JSON","stringify","downloadAnchorNode","document","createElement","setAttribute","body","appendChild","click","remove","downloadObjectAsJson","htmlFor","type","placeholder","onChange","required","map","selfGradeOption","difficultyOption","min","rows","props","rel","style","children"],"sourceRoot":""}